import type { NextPage } from 'next'
import { useState, useEffect } from 'react';
import { createSpendingRecord } from '../firebase/spendingRecords'
import { signIn, signOut } from '../firebase/authentication'
import { auth, db } from '../firebase/config'
import { onAuthStateChanged, User } from 'firebase/auth'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { collection, query, where, orderBy, startAt, endAt } from "firebase/firestore";
import useFetchCollectionData from '../hooks/useFetchCollectionData'
import { format } from 'date-fns'

const Home: NextPage = () => {
  const [user, setUser] = useState<User | null>()

  const [monthNum, setMonthNum] = useState<number>(0)

  // INFO: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#syntax
  // const date = new Date(), year = date.getFullYear(), month = date.getMonth();
  // new Date(year, monthIndex, day)
  const today = new Date()
  const year =  today.getFullYear()
  const month = today.getMonth();
  const startDate = new Date(year, month + monthNum, 1)
  const endDate = new Date(year, month + monthNum + 1, 0)

  const uid = "shum4q84tFOdAfORInn6QRXRUbt2"
  const q = query(collection(db, "spendingRecords"), where('uid', '==', uid), orderBy('date', 'asc'), where('date', ">=", startDate), where('date', '<=', endDate))

  const [ result, loading, error ] = useFetchCollectionData(q)


  const toJPYen = (num: number) => {
    return num.toLocaleString('ja-JP', {style:'currency', currency: 'JPY'})
  }

  useEffect(() => {
    const unsub = onAuthStateChanged(auth, user => {
      if(user) {
        setUser(user)
      } else {
        setUser(null)
      }
    })

    return () => {
      unsub()
    }
  }, []);

  if(error) {
    return <h1>Error</h1>
  }

  if(loading) {
    return <h1>Loading</h1>
  }

  if(!user) {
    return (
      <>
        <h1>Need to signin</h1> 
        <button onClick={() => {signIn()}}>SignIN</button>
      </>
    )
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.container}>

        <div className={styles.top}>
          <span>Total money spent</span>
          <h3 className={styles.total}>{toJPYen(5000)}</h3>
          <button className={styles.newRecordButton} onClick={() => {createSpendingRecord({category: "Groceries", amount: 233, uid: user.uid})}}>+</button>
        </div>

        <div className={styles.main}>
          {/* <button onClick={() => {signOut()}}>SignOut</button> */}

          {/* Calendar */}
          <div className={styles.targetMonth}>
            <button onClick={() => {setMonthNum(monthNum - 1)}}>{'<'}</button>
            <span>{ format(startDate, 'yyyy / MM') }</span>
            <button onClick={() => {setMonthNum(monthNum + 1)}}>{'>'}</button>
          </div>

          {/* Records */}
          <div className={styles.records}>
            {!result.length ? <div className={styles.noRecord}>No Record Found</div> : ""}

            <ul className={styles.recordsList}>
              {result.map((item, i) => (
                <li className={styles.recordItem} key={i}>
                  <span className={styles.recordCategory}>{ item.category }</span>
                  <span className={styles.recordAmount}>{ toJPYen(item.amount) }</span>
                  <span className={styles.recordDate}>{ format(new Date(item.date?.toDate()), 'yyyy-MM-dd') }</span>
                </li>
              ))}
            </ul>
          </div>
        </div>
        <div className={styles.footer}></div>
      </main>
    </div>
  )
}

export default Home
